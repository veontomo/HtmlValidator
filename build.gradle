group 'HtmlValidator'
version '0.0.3'
apply from: 'dependencies.gradle'
buildscript {
    apply from: 'dependencies.gradle'
    repositories {
        mavenCentral()
        maven {
            url "http://dl.bintray.com/kotlin/kotlin-eap-1.1"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
    }

}

// create an auxiliary file for the MockMaker of the Mockito 2 framework.
// see http://hadihariri.com/2016/10/04/Mocking-Kotlin-With-Mockito/
task createTestResources << {
    def separator = File.separator
    def fileName = [projectDir, 'src', 'test', 'resources', 'mockito-extensions', 'org.mockito.plugins.MockMaker'].join(separator)
    def mockMakerFile = new File(fileName)
    if (mockMakerFile.exists()) {
        logger.info("File ${mockMakerFile.name} already exists.")
    } else {
        def content = System.env.MOCK_MAKER ?: "mock-maker-inline"
        mockMakerFile.parentFile.mkdirs()
        mockMakerFile.createNewFile()
        mockMakerFile.write(content)
        println "create file ${mockMakerFile.name}"
    }

}
repositories {
    mavenCentral()
    maven {
        url "http://dl.bintray.com/kotlin/kotlin-eap-1.1"
    }
}
apply plugin: 'idea'
apply plugin: "application"
apply plugin: "java"
apply plugin: "kotlin"
apply plugin: 'antlr'

mainClassName = 'com.veontomo.htmlvalidator.MainKt'

sourceSets {
    main.java.srcDirs += 'src/main/kotlin/'
    test.java.srcDirs += 'src/test/kotlin/'
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$versions.kotlin"
    compile "org.jsoup:jsoup:$versions.jsoup"
    compile "org.apache.httpcomponents:httpcore:$versions.httpCore"
    compile "org.apache.httpcomponents:httpclient:$versions.httpClient"

    compile "io.reactivex:rxjava:$versions.rx"
    compile "io.reactivex:rxkotlin:$versions.rxkotlin"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$versions.kotlin"
    testCompile "org.mockito:mockito-core:$versions.mockitoCore"
    testCompile "com.nhaarman:mockito-kotlin:$versions.mockitoKotlin"
    testCompile "de.jodamob.kotlin:kotlin-runner-junit4:$versions.kotlinRunnerJUnit"
    testCompile "org.testfx:testfx-core:$versions.testfx"
    testCompile "org.testfx:testfx-junit:$versions.testfx"
    antlr "org.antlr:antlr4:$versions.antlr4"
    compile "org.antlr:antlr4-runtime:$versions.antlr4"
}
generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ['-package', 'com.veontomo.htmlvalidator.html', '-visitor']
    outputDirectory = new File("src/main/kotlin/com/veontomo/htmlvalidator/html")
}
compileJava.dependsOn generateGrammarSource

sourceSets {
    generated {
        java.srcDir 'generated-src/antlr/main/'
    }
}
compileJava.source sourceSets.generated.java, sourceSets.main.java

//clean {
//    delete "generated-src"
//}

//idea {
//    module {
//        sourceDirs += file("src/main/kotlin")
//    }
//}
